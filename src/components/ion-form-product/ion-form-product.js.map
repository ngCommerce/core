{"version":3,"sources":["ion-form-product.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,MAAA,EAAQ,YAAA,EAAoB,MAAO,eAAA,CAAgB;AAEvE;;;;;GAKG;AAEH,MAAM;IAGF;QADC,gBAAW,GAAsB,IAAI,YAAY,EAAO,CAAC;QAEtD,2DAA2D;IAC/D,CAAC;IACD,OAAO,CAAC,IAAI;QACR,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;;AACE,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiET;gBACD,MAAM,EAAE,CAAC;;;IAGT;iBACC;aACJ,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,MAAM,EAC7F,CAAC;AACK,sCAAc,GAA2C;IAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CACjC,CAAC","file":"ion-form-product.js","sourceRoot":"","sourcesContent":["import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n/**\n * Generated class for the IonListCategoryComponent component.\n *\n * See https://angular.io/api/core/Component for more info on Angular\n * Components.\n */\n\nexport class IonFormProductComponent {\n    items: any;\n     itemClicked: EventEmitter<any> = new EventEmitter<any>();\n    constructor() {\n        // console.log('Hello IonListCategoryComponent Component');\n    }\n    onClick(item) {\n        this.itemClicked.emit(item);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ion-form-product',\n    template: `\n    <ion-list>\n    \n      <ion-item>\n        <ion-label floating>Name</ion-label>\n        <ion-input type=\"text\" [(ngModel)]=\"item.name\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Detail</ion-label>\n        <ion-input type=\"text\" [(ngModel)]=\"item.detail\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Price</ion-label>\n        <ion-input type=\"number\" [(ngModel)]=\"item.price\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Promotion Price</ion-label>\n        <ion-input type=\"number\" [(ngModel)]=\"item.promotionprice\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Percent of discount</ion-label>\n        <ion-input type=\"number\" [(ngModel)]=\"item.percentofdiscount\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Currency</ion-label>\n        <ion-input type=\"text\" [(ngModel)]=\"item.currency\"></ion-input>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Categories</ion-label>\n        <ion-select [(ngModel)]=\"item.categories\" multiple=\"true\">\n          <ion-option *ngFor=\"let item of categories\" [value]=\"item\">{{item.name}}</ion-option>\n        </ion-select>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Shippings</ion-label>\n        <ion-select [(ngModel)]=\"item.shippings\" multiple=\"true\">\n          <ion-option *ngFor=\"let item of shippings\" [value]=\"item\">{{item.name}}</ion-option>\n        </ion-select>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Shop</ion-label>\n        <ion-select [(ngModel)]=\"item.shop\">\n          <ion-option *ngFor=\"let item of item.items\" [value]=\"item\">{{item.name}}</ion-option>\n        </ion-select>\n      </ion-item>\n    \n      <ion-item>\n        <ion-label floating>Image</ion-label>\n        <ion-input type=\"text\" [(ngModel)]=\"item.image\"></ion-input>\n      </ion-item>\n    \n    </ion-list>\n    \n    <div padding>\n      <button ion-button block (click)=\"onClick(item)\">Submit</button>\n    </div>\n    \n    `,\n    styles: [`\n  ion-form-product {\n    background-color: red;\n  }`\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'itemClicked': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}