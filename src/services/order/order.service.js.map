{"version":3,"sources":["order.service.ts"],"names":[],"mappings":"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","file":"order.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\nimport { API_URL } from \"../../models/core.model\";\nimport { OrderModel } from \"../../models/Order.model\";\n\n\nexport class OrderService {\n    private _apiURL: string;\n    constructor(  apiURL: String, public http: Http) {\n        this._apiURL = apiURL + 'orders/';\n    }\n\n    createAuthorizationHeader(token) {\n        let headers = new Headers();\n        headers.append(\"Authorization\", \"Bearer \" + token);\n        return headers;\n    }\n\n    getOrderList(token): Promise<Array<OrderModel>> {\n        let headers = this.createAuthorizationHeader(token);\n        return this.http.get(this._apiURL, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as Array<OrderModel>)\n            .catch(this.handleError);\n    }\n\n    createOrder(Order, token): Promise<OrderModel> {\n        let headers = this.createAuthorizationHeader(token);\n        return this.http.post(this._apiURL, Order, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as OrderModel)\n            .catch(this.handleError);\n    }\n\n    getOrderByID(id, token): Promise<OrderModel> {\n        let headers = this.createAuthorizationHeader(token);\n        return this.http.get(this._apiURL + id, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as OrderModel)\n            .catch(this.handleError);\n    }\n\n    updateOrder(Order, token): Promise<OrderModel> {\n        let headers = this.createAuthorizationHeader(token);\n        return this.http.put(this._apiURL + Order._id, Order, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as OrderModel)\n            .catch(this.handleError);\n    }\n\n    deleteOrder(id, token): Promise<OrderModel> {\n        let headers = this.createAuthorizationHeader(token);\n        return this.http.delete(this._apiURL + id, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as OrderModel)\n            .catch(this.handleError);\n    }\n\n\n    private handleError(error: any): Promise<any> {\n        return Promise.reject(error.message || error);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: String, decorators: [{ type: Inject, args: [API_URL, ] }, ]},\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}