{"version":3,"sources":["category.service.ts"],"names":[],"mappings":"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","file":"category.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\nimport { API_URL } from \"../../models/core.model\";\nimport { CorService } from \"../../core.service\";\nimport { CategoryModel } from \"../../models/category.model\";\n\n\nexport class CategoryService {\n    private _apiURL: String;\n    constructor(  apiURL: String, public http: Http, public corService: CorService) {\n        this._apiURL = apiURL;\n    }\n\n    getCategoryList(): Promise<Array<CategoryModel>> {\n        let headers = this.corService.createAuthorizationHeader();\n        return this.http.get(this._apiURL + 'categories/', { headers: headers })\n            .toPromise()\n            .then(response => response.json() as Array<CategoryModel>)\n            .catch(this.handleError);\n    }\n\n    createCategory(category): Promise<CategoryModel> {\n        let headers = this.corService.createAuthorizationHeader();\n        return this.http.post(this._apiURL + 'categories/', category, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as CategoryModel)\n            .catch(this.handleError);\n    }\n\n    getCategoryByID(id): Promise<CategoryModel> {\n        let headers = this.corService.createAuthorizationHeader();\n        return this.http.get(this._apiURL + 'categories/' + id, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as CategoryModel)\n            .catch(this.handleError);\n    }\n\n    updateCategory(category): Promise<CategoryModel> {\n        let headers = this.corService.createAuthorizationHeader();\n        return this.http.put(this._apiURL + 'categories/' + category._id, category, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as CategoryModel)\n            .catch(this.handleError);\n    }\n\n    deleteCategory(id): Promise<CategoryModel> {\n        let headers = this.corService.createAuthorizationHeader();\n        return this.http.delete(this._apiURL + 'categories/' + id, { headers: headers })\n            .toPromise()\n            .then(response => response.json() as CategoryModel)\n            .catch(this.handleError);\n    }\n\n    private handleError(error: any): Promise<any> {\n        return Promise.reject(error.message || error);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: String, decorators: [{ type: Inject, args: [API_URL, ] }, ]},\n{type: Http, },\n{type: CorService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}