{"version":3,"sources":["omise.service.ts"],"names":[],"mappings":"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","file":"omise.service.js","sourceRoot":"","sourcesContent":["import { OmiseKey } from './../../models/core.model';\nimport { Injectable, Inject } from \"@angular/core\";\nimport Omise from 'omise';\nimport 'rxjs/add/operator/toPromise';\n\n\nexport class OmiseService {\n    private _omiseKey: String;\n    constructor(  omiseKey: String) {\n        this._omiseKey = omiseKey;\n    }\n    checkTokenByCredit(payment) {\n        let omise = new Omise({\n            'publicKey': this._omiseKey, //pkey_test_58zdlcecghhko63vy18\n            // 'secretKey': 'skey_test_59owuo5mlz8nv5s6tux'\n        });\n        let currentstep = null;\n        let detailCard = {\n            card: {\n                name: payment.paymenttype,\n                number: payment.creditno,\n                expiration_month: payment.expdate.substr(0, 2),\n                expiration_year: payment.expdate.substr(3, 5),\n                security_code: payment.creditcvc\n            }\n        };\n        return new Promise((resolve, reject) => {\n            omise.tokens.create(detailCard, function (token) {\n            }).then(async function (data) {\n                resolve(data);\n            }).error(async function (err) {\n                reject(err)\n            }).done();\n        })\n    }\n    paymenyByCredit(id, money) {\n        let omise = new Omise({\n            'publicKey': this._omiseKey, //pkey_test_58zdlcecghhko63vy18\n            // 'secretKey': 'skey_test_59owuo5mlz8nv5s6tux'\n        });\n        money = money * 100;\n        return new Promise((resolve, reject) => {\n            omise.charges.create({\n                'description': 'Charge for order ID: 888',\n                'amount': money, // 1,000 Baht\n                'currency': 'thb',\n                'capture': false,\n                'card': id\n            }, function (err, resp) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(resp);\n                }\n            });\n        });\n    }\n    paymenyByBank(bank, money) {\n        let omise = new Omise({\n            'publicKey': this._omiseKey, //pkey_test_58zdlcecghhko63vy18\n            // 'secretKey': 'skey_test_59owuo5mlz8nv5s6tux'\n        });\n        money = money * 100;\n        return new Promise((resolve, reject) => {\n            omise.charges.create({\n                'description': 'Charge for order ID: 888',\n                'amount': money, // 1,000 Baht\n                'currency': 'thb',\n                \"offsite\": bank,\n                \"return_uri\": \"http://res.cloudinary.com/hzzat7wj2/image/upload/v1508823378/Pmss_newdsad_rv92zb.jpg\"\n            }, function (err, resp) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(resp);\n                }\n            });\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: String, decorators: [{ type: Inject, args: [OmiseKey, ] }, ]},\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}