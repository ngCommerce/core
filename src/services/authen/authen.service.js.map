{"version":3,"sources":["authen.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,MAAA,EAAO,MAAO,eAAA,CAAgB;AACnD,OAAO,EAAE,IAAA,EAAK,MAAO,eAAA,CAAgB;AACrC,OAAO,6BAAA,CAA8B;AACrC,OAAO,EAAE,OAAA,EAAQ,MAAO,yBAAA,CAA0B;AAIlD,MAAM;IAGF,YAAc,MAAc,EAAS,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAC3C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,MAAM;QACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,aAAa,EAAE,MAAM,CAAC;aACtD,SAAS,EAAE;aACX,IAAI,CAAC,QAAQ;YACV,IAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAe,CAAC;YACvC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,GAAG,CAAC;QACf,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,aAAa,EAAE,IAAI,CAAC;aACpD,SAAS,EAAE;aACX,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAe,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,WAAW,CAAC,KAAU;QAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;;AACE,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAG,EAAC;IACnE,EAAC,IAAI,EAAE,IAAI,GAAG;CACb,CAAC","file":"authen.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\nimport { API_URL } from \"../../models/core.model\";\nimport { SigninModel, SignupModel, UserModel } from \"../../models/authen.model\";\n\n\nexport class AuthenService {\n    private _apiURL: String;\n\n    constructor(  apiURL: String, public http: Http) {\n        this._apiURL = apiURL;\n    }\n\n    signIn(authen): Promise<UserModel> {\n        return this.http.post(this._apiURL + 'auth/signin', authen)\n            .toPromise()\n            .then(response => {\n                let res = response.json() as UserModel;\n                window.localStorage.setItem('token', res.loginToken);\n                return res;\n            })\n            .catch(this.handleError);\n    }\n\n    signUp(user): Promise<UserModel> {\n        return this.http.post(this._apiURL + 'auth/singup', user)\n            .toPromise()\n            .then(response => response.json() as UserModel)\n            .catch(this.handleError);\n    }\n\n    private handleError(error: any): Promise<any> {\n        return Promise.reject(error.message || error);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: String, decorators: [{ type: Inject, args: [API_URL, ] }, ]},\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}